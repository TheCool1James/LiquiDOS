<?xml version="1.0"?>
<analyzerinfo checksum="3035071364">
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_val&apos; can be reduced." verbose="The scope of the variable &apos;symbol_val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="C:\Users\Kevin\Documents\GitHub\Vagrant\EurusOS\kernelsrc\tasking\symbol_table.c" file="C:\Users\Kevin\Documents\GitHub\Vagrant\EurusOS\kernelsrc\tasking\symbol_table.c" line="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symbol_val&apos; can be reduced." verbose="The scope of the variable &apos;symbol_val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="C:\Users\Kevin\Documents\GitHub\Vagrant\EurusOS\kernelsrc\tasking\symbol_table.c" file="C:\Users\Kevin\Documents\GitHub\Vagrant\EurusOS\kernelsrc\tasking\symbol_table.c" line="59"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &apos;CONFIG_UNDERSCORE_SYMBOL_PREFIX&apos; was not checked because its code equals another one." verbose="The configuration &apos;CONFIG_UNDERSCORE_SYMBOL_PREFIX&apos; was not checked because its code equals another one.">
            <location file="C:\Users\Kevin\Documents\GitHub\Vagrant\EurusOS\kernelsrc\tasking\symbol_table.c" line="0"/>
        </error>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="load_symbol_table" lineNumber="14"/>
    <functiondecl functionName="get_symbol_name" lineNumber="32"/>
    <functiondecl functionName="get_symbol_addr" lineNumber="57"/>
    <functioncall functionName="false"/>
    <functioncall functionName="for"/>
    <functioncall functionName="i"/>
    <functioncall functionName="if"/>
    <functioncall functionName="num_sym"/>
    <functioncall functionName="present"/>
    <functioncall functionName="sh_addr"/>
    <functioncall functionName="sizeof"/>
    <functioncall functionName="st_name"/>
    <functioncall functionName="st_value"/>
    <functioncall functionName="string_idx"/>
    <functioncall functionName="temp"/>
    <functioncall functionName="true"/>
  </FileInfo>
</analyzerinfo>
