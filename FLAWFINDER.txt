Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
Examining kernelsrc/arch/x86/acpi/bootacpi.c
Examining kernelsrc/arch/x86/cpu/cpu.c
Examining kernelsrc/arch/x86/cpu/llio.c
Examining kernelsrc/arch/x86/cpu/smp.c
Examining kernelsrc/arch/x86/descriptors/gdt.c
Examining kernelsrc/arch/x86/descriptors/idt.c
Examining kernelsrc/arch/x86/init.c
Examining kernelsrc/arch/x86/intc/apic.c
Examining kernelsrc/arch/x86/intc/pic.c
Examining kernelsrc/arch/x86/interrupts/exceptions.c
Examining kernelsrc/arch/x86/interrupts/interrupts.c
Examining kernelsrc/arch/x86/interrupts/syscalls.c
Examining kernelsrc/arch/x86/misc/multiboot_utils.c
Examining kernelsrc/arch/x86/misc/serial.c
Examining kernelsrc/arch/x86/misc/stack_trace.c
Examining kernelsrc/arch/x86/misc/vga.c
Examining kernelsrc/arch/x86/mm/bootmm.c
Examining kernelsrc/arch/x86/mm/meminit.c
Examining kernelsrc/arch/x86/mm/paging.c
Examining kernelsrc/core/console.c
Examining kernelsrc/core/device.c
Examining kernelsrc/core/kernel.c
Examining kernelsrc/core/log.c
Examining kernelsrc/core/printk.c
Examining kernelsrc/core/tty.c
Examining kernelsrc/core/vsprintf.c
Examining kernelsrc/include/arch/arch_interface.h
Examining kernelsrc/include/arch/atomic.h
Examining kernelsrc/include/arch/x86/acpi.h
Examining kernelsrc/include/arch/x86/acpitypes.h
Examining kernelsrc/include/arch/x86/apic.h
Examining kernelsrc/include/arch/x86/arch_common.h
Examining kernelsrc/include/arch/x86/bootmm.h
Examining kernelsrc/include/arch/x86/cpu.h
Examining kernelsrc/include/arch/x86/cpufeatset.h
Examining kernelsrc/include/arch/x86/exceptions.h
Examining kernelsrc/include/arch/x86/gdt.h
Examining kernelsrc/include/arch/x86/interface/arch_interface.h
Examining kernelsrc/include/arch/x86/interface/atomic.h
Examining kernelsrc/include/arch/x86/interface/meminit.h
Examining kernelsrc/include/arch/x86/interrupts.h
Examining kernelsrc/include/arch/x86/llio.h
Examining kernelsrc/include/arch/x86/multiboot.h
Examining kernelsrc/include/arch/x86/multiboot_utils.h
Examining kernelsrc/include/arch/x86/paging.h
Examining kernelsrc/include/arch/x86/pic.h
Examining kernelsrc/include/arch/x86/serial.h
Examining kernelsrc/include/arch/x86/stack_trace.h
Examining kernelsrc/include/arch/x86/syscalls.h
Examining kernelsrc/include/arch/x86/vga.h
Examining kernelsrc/include/assert.h
Examining kernelsrc/include/autoconf.h
Examining kernelsrc/include/bitmap.h
Examining kernelsrc/include/common.h
Examining kernelsrc/include/compiler_flags.h
Examining kernelsrc/include/config.h
Examining kernelsrc/include/core/console.h
Examining kernelsrc/include/export.h
Examining kernelsrc/include/lib/lib.h
Examining kernelsrc/include/lib/printk.h
Examining kernelsrc/include/lib/string.h
Examining kernelsrc/include/lib/tui/BasicDrawUtils.h
Examining kernelsrc/include/list.h
Examining kernelsrc/include/log.h
Examining kernelsrc/include/mm/malloc.h
Examining kernelsrc/include/mm/mmtypes.h
Examining kernelsrc/include/mm/page_alloc.h
Examining kernelsrc/include/mm/zones.h
Examining kernelsrc/include/panic.h
Examining kernelsrc/include/platforms.h
Examining kernelsrc/include/system.h
Examining kernelsrc/include/tasking/elf.h
Examining kernelsrc/include/tasking/symbol_table.h
Examining kernelsrc/include/tty.h
Examining kernelsrc/include/utils.h
Examining kernelsrc/lib/lib.c
Examining kernelsrc/lib/math.c
Examining kernelsrc/lib/panic_assert.c
Examining kernelsrc/lib/string.c
Examining kernelsrc/lib/tui/BasicDrawUtils.c
Examining kernelsrc/lib/tui/DrawWindow.c
Examining kernelsrc/mm/malloc.c
Examining kernelsrc/mm/page_alloc.c
Examining kernelsrc/tasking/symbol_table.c
kernelsrc/arch/x86/descriptors/gdt.c:38:  [4] (race) access:
  This usually indicates a security flaw.  If an attacker can change
  anything along the path between the call to access() and the file's actual
  use (e.g., by moving files), the attacker can exploit the race
  condition. Set up the correct permissions (e.g., using setuid()) and try to
  open the file directly. 
kernelsrc/arch/x86/descriptors/gdt.c:48:  [4] (race) access:
  This usually indicates a security flaw.  If an attacker can change
  anything along the path between the call to access() and the file's actual
  use (e.g., by moving files), the attacker can exploit the race
  condition. Set up the correct permissions (e.g., using setuid()) and try to
  open the file directly. 
kernelsrc/core/printk.c:109:  [4] (format) fprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
kernelsrc/core/vsprintf.c:227:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
kernelsrc/core/vsprintf.c:231:  [4] (format) vsprintf:
  Potential format string problem. Make format string constant. 
kernelsrc/core/vsprintf.c:236:  [4] (format) vsprintf:
  Potential format string problem. Make format string constant. 
kernelsrc/include/arch/x86/gdt.h:25:  [4] (race) access:
  This usually indicates a security flaw.  If an attacker can change
  anything along the path between the call to access() and the file's actual
  use (e.g., by moving files), the attacker can exploit the race
  condition. Set up the correct permissions (e.g., using setuid()) and try to
  open the file directly. 
kernelsrc/include/lib/printk.h:24:  [4] (format) fprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
kernelsrc/include/lib/printk.h:25:  [4] (format) vsprintf:
  Potential format string problem. Make format string constant. 
kernelsrc/include/lib/printk.h:27:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
kernelsrc/include/lib/string.h:23:  [4] (buffer) strcat:
  Does not check for buffer overflows when concatenating to destination.
  Consider using strncat or strlcat (warning, strncat is easily misused). 
kernelsrc/include/lib/string.h:24:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
kernelsrc/include/panic.h:24:  [4] (format) fprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
kernelsrc/lib/string.c:44:  [4] (buffer) strcat:
  Does not check for buffer overflows when concatenating to destination.
  Consider using strncat or strlcat (warning, strncat is easily misused). 
kernelsrc/lib/string.c:46:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
kernelsrc/lib/string.c:50:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
kernelsrc/lib/string.c:58:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
kernelsrc/arch/x86/cpu/cpu.c:34:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
kernelsrc/arch/x86/init.c:68:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
kernelsrc/core/printk.c:22:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
kernelsrc/core/vsprintf.c:41:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
kernelsrc/include/arch/x86/acpitypes.h:22:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
kernelsrc/include/arch/x86/acpitypes.h:24:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
kernelsrc/include/arch/x86/acpitypes.h:41:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
kernelsrc/include/lib/string.h:21:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
kernelsrc/lib/lib.c:17:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
kernelsrc/lib/lib.c:18:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
kernelsrc/lib/lib.c:45:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
kernelsrc/lib/string.c:26:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
kernelsrc/lib/string.c:52:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
kernelsrc/mm/malloc.c:162:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
kernelsrc/arch/x86/init.c:54:  [1] (buffer) getc:
  Check buffer boundaries if used in a loop. 
kernelsrc/core/console.c:33:  [1] (buffer) getc:
  Check buffer boundaries if used in a loop. 
kernelsrc/core/vsprintf.c:58:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
kernelsrc/core/vsprintf.c:75:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
kernelsrc/core/vsprintf.c:152:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
kernelsrc/core/vsprintf.c:152:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
kernelsrc/include/core/console.h:27:  [1] (buffer) getc:
  Check buffer boundaries if used in a loop. 
kernelsrc/include/lib/string.h:27:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
kernelsrc/lib/lib.c:34:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
kernelsrc/lib/lib.c:72:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
kernelsrc/lib/string.c:46:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
kernelsrc/lib/string.c:52:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
kernelsrc/lib/string.c:57:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
kernelsrc/lib/string.c:69:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 

Hits = 45
Lines analyzed = 5397 in 3.72 seconds (1677 lines/second)
Physical Source Lines of Code (SLOC) = 3658
Hits@level = [0]   0 [1]  14 [2]  14 [3]   0 [4]  17 [5]   0
Hits@level+ = [0+]  45 [1+]  45 [2+]  31 [3+]  17 [4+]  17 [5+]   0
Hits/KSLOC@level+ = [0+] 12.3018 [1+] 12.3018 [2+] 8.47458 [3+] 4.64735 [4+] 4.64735 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
